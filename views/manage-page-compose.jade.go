// Code generated by "jade.go"; DO NOT EDIT.

package views

import (
	"bufio"
	"net/url"

	"github.com/ngocphuongnb/tetua/app/asset"
	"github.com/ngocphuongnb/tetua/app/cache"
	"github.com/ngocphuongnb/tetua/app/config"
	"github.com/ngocphuongnb/tetua/app/entities"
	"github.com/ngocphuongnb/tetua/app/utils"
)

const (
	managepagecompose__19  = `</ul><label class="menu-trigger"><svg viewBox="0 0 24 24"><path fill="currentColor" d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z"></path></svg></label></nav></header><div class="wrapper"><div class="container"><form method="POST" enctype="multipart/form-data"><div class="layout"><div class="left"><div class="box fixed-sidebar">`
	managepagecompose__21  = `<textarea class="content" name="content">`
	managepagecompose__22  = `</textarea></div></div><div class="right"><div class="box fixed-sidebar"><div class="flex">`
	managepagecompose__23  = `</div><div></div><div class="save-actions"><button>Save</button><label class="switch" for="save-draft">Draft &nbsp;`
	managepagecompose__24  = `<span class="slider"></span></label></div>`
	managepagecompose__25  = `<div><strong>Featured Image</strong><input type="hidden" name="featured_image_id" value="`
	managepagecompose__26  = `"/><input class="image-input" id="featured-image" type="file" name="featured_image"/><div class="image-upload-previewer" for="featured-image"><img src="`
	managepagecompose__27  = `"/></div></div>`
	managepagecompose__28  = `</div></div></div></form></div><div class="mobile-menu"><div class="menu-head">`
	managepagecompose__33  = `<script src="/static/js/manage.js"></script><script>listenDeleteNodeEvents('page', '/manage/pages', '/manage/pages')</script><script>new TetuaEditor('.content', {uploadHandler: uploadHandler, disableTitle: true});</script></body></html>`
	managepagecompose__77  = `<h1>`
	managepagecompose__79  = `<h1>New page</h1>`
	managepagecompose__85  = `<p><label>`
	managepagecompose__86  = `</label><input name="`
	managepagecompose__87  = `" value="`
	managepagecompose__88  = `"/></p>`
	managepagecompose__93  = `<a class="link-icon" href="`
	managepagecompose__94  = `"><svg style="width:24px;height:24px" viewBox="0 0 24 24"><path fill="currentColor" d="M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"></path></svg>`
	managepagecompose__96  = `<input id="save-draft" type="checkbox" name="draft" checked="checked"/>`
	managepagecompose__97  = `<input id="save-draft" type="checkbox" name="draft"/>`
	managepagecompose__98  = `<div class="flex"><a class="btn" target="_blank" href="`
	managepagecompose__99  = `">Preview</a><button class="danger delete-page" data-id="`
	managepagecompose__100 = `">Delete</button></div>`
	managepagecompose__101 = `<strong style="margin-bottom:5px;display:block">Writing a Great Post</strong><ul><li>Using markdown shortcut to compose your post.</li><li>Use the Markdown switch button to toggle between rich text and plain markdown editor mode.</li><li>Select the topics that represent for the post content.</li></ul>`
)

func ManagePageCompose(page *entities.Page, featuredImage *entities.File) func(meta *entities.Meta, wr *bufio.Writer) {
	return func(meta *entities.Meta, wr *bufio.Writer) {
		buffer := &WriterAsBuffer{wr}

		buffer.WriteString(commentlist__0)

		var title = meta.GetTitle()
		var appName = config.Setting("app_name")
		var appLogo = config.Setting("app_logo")
		var encodeRequestURL = url.QueryEscape(meta.RequestURL)
		buffer.WriteString(commentlist__1)
		WriteAll(title, true, buffer)
		buffer.WriteString(commentlist__2)
		WriteAll(meta.Canonical, true, buffer)
		buffer.WriteString(commentlist__3)
		WriteAll(meta.Type, true, buffer)
		buffer.WriteString(commentlist__4)
		WriteAll(meta.Canonical, true, buffer)
		buffer.WriteString(commentlist__5)
		WriteAll(title, true, buffer)
		buffer.WriteString(commentlist__6)
		WriteAll(appName, true, buffer)
		buffer.WriteString(commentlist__7)
		WriteAll(config.Setting("twitter_site"), true, buffer)
		buffer.WriteString(commentlist__8)
		WriteAll(title, true, buffer)
		buffer.WriteString(commentlist__9)
		WriteAll(appName, true, buffer)
		buffer.WriteString(commentlist__10)
		WriteAll(appName, true, buffer)
		buffer.WriteString(commentlist__11)
		WriteAll(appName+" Feed", true, buffer)
		buffer.WriteString(commentlist__12)
		WriteAll(utils.Url("/feed"), true, buffer)
		buffer.WriteString(commentlist__13)
		if appLogo != "" {
			buffer.WriteString(commentlist__30)
			WriteAll(appLogo, true, buffer)
			buffer.WriteString(commentlist__31)
			WriteAll(appLogo, true, buffer)
			buffer.WriteString(commentlist__13)
		}
		if meta.Description != "" {
			buffer.WriteString(commentlist__33)
			WriteAll(meta.Description, true, buffer)
			buffer.WriteString(commentlist__34)
			WriteAll(meta.Description, true, buffer)
			buffer.WriteString(commentlist__35)
			WriteAll(meta.Description, true, buffer)
			buffer.WriteString(commentlist__13)
		}
		if meta.Image != "" {
			buffer.WriteString(commentlist__37)
			WriteAll(meta.Image, true, buffer)
			buffer.WriteString(commentlist__38)
			WriteAll(meta.Image, true, buffer)
			buffer.WriteString(commentlist__13)
		}
		WriteAll(asset.CssFile("css/light.min.css"), false, buffer)
		WriteAll(asset.CssFile("editor/tippy-6.3.7.min.css"), false, buffer)
		WriteAll(asset.CssFile("editor/tippy-light-6.3.7.min.css"), false, buffer)
		WriteAll(asset.CssFile("editor/style.css"), false, buffer)
		WriteAll(asset.CssFile("css/style.css"), false, buffer)
		WriteAll(config.Setting("inject_header"), false, buffer)
		buffer.WriteString(commentlist__14)
		WriteAll(utils.Url(""), true, buffer)
		buffer.WriteString(commentlist__15)
		var logoUrl = config.Setting("app_logo")
		if logoUrl != "" {
			buffer.WriteString(commentlist__40)
			WriteAll(logoUrl, true, buffer)
			buffer.WriteString(commentlist__41)
			WriteAll(config.Setting("app_name"), true, buffer)
			buffer.WriteString(commentlist__13)
		} else {
			buffer.WriteString(commentlist__43)

		}
		buffer.WriteString(commentlist__16)
		WriteAll(meta.Query, true, buffer)
		buffer.WriteString(commentlist__17)
		WriteAll(utils.Url("/search"), true, buffer)
		buffer.WriteString(commentlist__18)

		if meta.User == nil || meta.User.ID == 0 {
			buffer.WriteString(commentlist__44)
			WriteAll(utils.Url("/login?redirectURL="+encodeRequestURL), true, buffer)
			buffer.WriteString(commentlist__45)
			WriteAll(utils.Url("/register?redirectURL="+encodeRequestURL), true, buffer)
			buffer.WriteString(commentlist__46)

		} else {
			buffer.WriteString(commentlist__44)
			WriteAll(utils.Url("/posts/new"), true, buffer)
			buffer.WriteString(commentlist__48)
			WriteAll(meta.User.Url(), true, buffer)
			buffer.WriteString(commentlist__49)
			WriteAll(meta.User.Username, true, buffer)
			buffer.WriteString(commentlist__50)
			if meta.User.AvatarImageUrl != "" {
				buffer.WriteString(commentlist__57)
				WriteAll(meta.User.AvatarImageUrl, true, buffer)
				buffer.WriteString(commentlist__41)
				WriteAll(meta.User.Username, true, buffer)
				buffer.WriteString(commentlist__13)
			} else {
				buffer.WriteString(commentlist__60)

			}
			buffer.WriteString(commentlist__51)

			if meta.User != nil && meta.User.IsRoot() {
				buffer.WriteString(commentlist__44)
				WriteAll(utils.Url("/manage"), true, buffer)
				buffer.WriteString(commentlist__62)

			}
			buffer.WriteString(commentlist__44)
			WriteAll(meta.User.Url(), true, buffer)
			buffer.WriteString(commentlist__53)
			WriteAll(utils.Url("/posts"), true, buffer)
			buffer.WriteString(commentlist__54)
			WriteAll(utils.Url("/settings"), true, buffer)
			buffer.WriteString(commentlist__55)
			WriteAll(utils.Url("/logout?redirectURL="+encodeRequestURL), true, buffer)
			buffer.WriteString(commentlist__56)

		}
		buffer.WriteString(managepagecompose__19)

		{
			buffer.WriteString(commentlist__119)
			WriteAll(utils.Url("/manage"), true, buffer)
			buffer.WriteString(commentlist__120)
			WriteAll(utils.Url("/manage/topics"), true, buffer)
			buffer.WriteString(commentlist__121)
			WriteAll(utils.Url("/manage/posts"), true, buffer)
			buffer.WriteString(commentlist__122)
			WriteAll(utils.Url("/manage/pages"), true, buffer)
			buffer.WriteString(commentlist__123)
			WriteAll(utils.Url("/manage/roles"), true, buffer)
			buffer.WriteString(commentlist__124)
			WriteAll(utils.Url("/manage/users"), true, buffer)
			buffer.WriteString(commentlist__125)
			WriteAll(utils.Url("/manage/comments"), true, buffer)
			buffer.WriteString(commentlist__126)
			WriteAll(utils.Url("/manage/files"), true, buffer)
			buffer.WriteString(commentlist__127)
			WriteAll(utils.Url("/manage/settings"), true, buffer)
			buffer.WriteString(commentlist__72)

		}

		buffer.WriteString(managecommentindex__20)

		if page.ID > 0 {
			buffer.WriteString(managepagecompose__77)
			WriteAll(page.Name, true, buffer)
			buffer.WriteString(error__20)
		} else {
			buffer.WriteString(managepagecompose__79)

		}
		{
			var (
				msgs = meta.Messages
			)

			if msgs.Length() > 0 {
				buffer.WriteString(commentlist__73)
				var messages = msgs.Get()
				for _, msg := range messages {
					buffer.WriteString(commentlist__75)
					WriteAll(msg.Type, true, buffer)
					buffer.WriteString(commentlist__50)
					WriteAll(msg.Message, true, buffer)
					buffer.WriteString(commentlist__77)
				}
				buffer.WriteString(commentlist__74)
			}
		}

		{
			var (
				name  = "name"
				value = page.Name
				label = "Name"
			)

			buffer.WriteString(managepagecompose__85)
			WriteEscString(label, buffer)
			buffer.WriteString(managepagecompose__86)
			WriteEscString(name, buffer)
			buffer.WriteString(managepagecompose__87)
			WriteAll(value, true, buffer)
			buffer.WriteString(managepagecompose__88)
		}

		{
			var (
				name  = "slug"
				value = page.Slug
				label = "Slug"
			)

			buffer.WriteString(managepagecompose__85)
			WriteEscString(label, buffer)
			buffer.WriteString(managepagecompose__86)
			WriteEscString(name, buffer)
			buffer.WriteString(managepagecompose__87)
			WriteAll(value, true, buffer)
			buffer.WriteString(managepagecompose__88)
		}

		buffer.WriteString(managepagecompose__21)
		WriteAll(page.Content, true, buffer)
		buffer.WriteString(managepagecompose__22)

		{
			var (
				label = "New Page"
				link  = "/manage/pages/new"
			)

			buffer.WriteString(managepagecompose__93)
			WriteEscString(link, buffer)
			buffer.WriteString(managepagecompose__94)
			WriteEscString(label, buffer)
			buffer.WriteString(commentlist__132)
		}

		buffer.WriteString(managepagecompose__23)

		if page.Draft {
			buffer.WriteString(managepagecompose__96)
		} else {
			buffer.WriteString(managepagecompose__97)
		}
		buffer.WriteString(managepagecompose__24)

		if page.ID > 0 {
			buffer.WriteString(managepagecompose__98)
			WriteAll(page.Url(), true, buffer)
			buffer.WriteString(managepagecompose__99)
			WriteAll(page.ID, true, buffer)
			buffer.WriteString(managepagecompose__100)

		}
		buffer.WriteString(managepagecompose__25)
		WriteAll(page.FeaturedImageID, true, buffer)
		buffer.WriteString(managepagecompose__26)
		WriteAll(featuredImage.Url(), true, buffer)
		buffer.WriteString(managepagecompose__27)

		{
			buffer.WriteString(managepagecompose__101)

		}

		buffer.WriteString(managepagecompose__28)
		WriteAll(config.Setting("app_name"), true, buffer)
		buffer.WriteString(commentlist__25)

		if meta.User == nil || meta.User.ID == 0 {
			buffer.WriteString(commentlist__106)
			WriteAll(utils.Url("/login?redirectURL="+encodeRequestURL), true, buffer)
			buffer.WriteString(commentlist__107)
			WriteAll(utils.Url("/register?redirectURL="+encodeRequestURL), true, buffer)
			buffer.WriteString(commentlist__108)

		} else {
			{
				buffer.WriteString(commentlist__63)
				WriteAll(meta.User.AvatarElm("32", "32", false), false, buffer)
				buffer.WriteString(commentlist__64)
				WriteAll(meta.User.Url(), true, buffer)
				buffer.WriteString(commentlist__50)
				WriteAll(meta.User.Name(), true, buffer)
				buffer.WriteString(commentlist__66)
				WriteAll("@"+meta.User.Username, true, buffer)
				buffer.WriteString(commentlist__67)
				WriteAll(utils.Url("/posts/new"), true, buffer)
				buffer.WriteString(commentlist__68)
				WriteAll(utils.Url("/posts"), true, buffer)
				buffer.WriteString(commentlist__69)
				WriteAll(utils.Url("/comments"), true, buffer)
				buffer.WriteString(commentlist__70)
				WriteAll(utils.Url("/files"), true, buffer)
				buffer.WriteString(commentlist__71)
				WriteAll(utils.Url("/settings"), true, buffer)
				buffer.WriteString(commentlist__72)

			}

			if meta.User.IsRoot() {
				{
					buffer.WriteString(commentlist__119)
					WriteAll(utils.Url("/manage"), true, buffer)
					buffer.WriteString(commentlist__120)
					WriteAll(utils.Url("/manage/topics"), true, buffer)
					buffer.WriteString(commentlist__121)
					WriteAll(utils.Url("/manage/posts"), true, buffer)
					buffer.WriteString(commentlist__122)
					WriteAll(utils.Url("/manage/pages"), true, buffer)
					buffer.WriteString(commentlist__123)
					WriteAll(utils.Url("/manage/roles"), true, buffer)
					buffer.WriteString(commentlist__124)
					WriteAll(utils.Url("/manage/users"), true, buffer)
					buffer.WriteString(commentlist__125)
					WriteAll(utils.Url("/manage/comments"), true, buffer)
					buffer.WriteString(commentlist__126)
					WriteAll(utils.Url("/manage/files"), true, buffer)
					buffer.WriteString(commentlist__127)
					WriteAll(utils.Url("/manage/settings"), true, buffer)
					buffer.WriteString(commentlist__72)

				}

			}
		}
		buffer.WriteString(commentlist__26)

		for _, topic := range cache.Topics {
			buffer.WriteString(commentlist__106)
			WriteAll(topic.Url(), true, buffer)
			buffer.WriteString(commentlist__49)
			WriteAll(topic.Name, true, buffer)
			buffer.WriteString(commentlist__50)
			WriteAll("#"+topic.Name, true, buffer)
			buffer.WriteString(commentlist__132)
		}
		buffer.WriteString(commentlist__27)
		WriteAll(config.Setting("footer_content"), false, buffer)
		buffer.WriteString(commentlist__28)
		WriteAll(config.Setting("inject_footer"), false, buffer)
		WriteAll(asset.JsFile("js/layout.js"), false, buffer)
		WriteAll(asset.JsFile("editor/highlight-11.5.0.min.js"), false, buffer)
		WriteAll(asset.JsFile("editor/editor.js"), false, buffer)
		WriteAll(asset.JsFile("js/main.js"), false, buffer)
		buffer.WriteString(managepagecompose__33)

	}
}
